// Mocks generated by Mockito 5.0.17 from annotations
// in photoapi/test/like_button_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:flutter_bloc/flutter_bloc.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:photoapi/bloc/likes_cubit.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [LikesCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikesCubit extends _i1.Mock implements _i2.LikesCubit {
  MockLikesCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get key =>
      (super.noSuchMethod(Invocation.getter(#key), returnValue: 0) as int);
  @override
  bool get state =>
      (super.noSuchMethod(Invocation.getter(#state), returnValue: false)
          as bool);
  @override
  _i3.Stream<bool> get stream => (super.noSuchMethod(Invocation.getter(#stream),
      returnValue: Stream<bool>.empty()) as _i3.Stream<bool>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void like() => super.noSuchMethod(Invocation.method(#like, []),
      returnValueForMissingStub: null);
  @override
  void unlike() => super.noSuchMethod(Invocation.method(#unlike, []),
      returnValueForMissingStub: null);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void emit(bool? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void onChange(_i4.Change<bool>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}
